version: '3.7'

services:

  redis:
    image: redis:alpine
    ports:
    - 6379
    networks:
    - frontend
    deploy:
      replicas: 3
      update_config:
        parallelism: 2
        delay: 10s
        order: start_first
      rollback_config:
        parallelism: 1
        delay: 30s
        failure_action: pause
        monitor: 60s
        order: stop_first
      restart_policy:
        condition: on-failure

  db:
    image: postgres:12
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      placement:
        constraints: [node.role == manager]

  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
    - 5000:80
  networks:
  - frontend
  depens_on:
  - redis
  deploy:
    replicas: 3
    update_config:
      parallelism: 2
    restart_policy:
      condition: on-failure

  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
    - 5001:80
    networks:
    - backend
    depens_on:
    - db
    deploy:
      replicas: 1
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure

  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
      - frontend
      - backend
    deploy:
      mode: replicated
      replicas: 1
      labels: [app=voting]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [node.role == manager]

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
    - '8080:8080'
    stop_grace_period: 1m30s
    volumes:
    - '/var/run/docker.sock:/var/run/docker.sock'
    deploy:
      placement:
        constraints: [node.role == manager]

networks:
  frontend:
  backend:

volumes:
  pgdata:  
     